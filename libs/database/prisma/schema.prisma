// Prisma schema for the dungeon crawler game engine
// This schema covers Player, WorldTile, Monster, WeatherState, and Biome

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model GameState {
  id        Int      @id @default(autoincrement())
  tick      Int      @default(0)
  gameHour  Int      @default(0) // 0-23
  gameDay   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Player {
  id          Int        @id @default(autoincrement())
  slackId     String     @unique // Slack user ID
  name        String
  x           Int // X coordinate
  y           Int // Y coordinate
  hp          Int // Hit points
  gold        Int        @default(0)
  xp          Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  worldTile   WorldTile? @relation("PlayerLocation", fields: [worldTileId], references: [id])
  worldTileId Int?
}

model WorldSeed {
  id                     Int      @id @default(autoincrement())
  seed                   Int      @unique
  heightSeed             Int
  temperatureSeed        Int
  moistureSeed           Int
  heightScale            Float    @default(0.01)
  temperatureScale       Float    @default(0.008)
  moistureScale          Float    @default(0.012)
  heightOctaves          Int      @default(4)
  temperatureOctaves     Int      @default(3)
  moistureOctaves        Int      @default(3)
  heightPersistence      Float    @default(0.5)
  temperaturePersistence Float    @default(0.6)
  moisturePersistence    Float    @default(0.4)
  heightLacunarity       Float    @default(2.0)
  temperatureLacunarity  Float    @default(2.1)
  moistureLacunarity     Float    @default(1.9)
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model WorldTile {
  id          Int       @id @default(autoincrement())
  x           Int
  y           Int
  biomeId     Int
  biome       Biome     @relation(fields: [biomeId], references: [id])
  biomeName   String // Store biome name for faster queries
  description String
  height      Float // 0-1 height value from terrain noise
  temperature Float // 0-1 temperature value from temperature noise
  moisture    Float // 0-1 moisture value from moisture noise
  seed        Int // World seed used to generate this tile
  chunkX      Int // Chunk X coordinate (x / 50)
  chunkY      Int // Chunk Y coordinate (y / 50)
  monsters    Monster[]
  players     Player[]  @relation("PlayerLocation")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([x, y])
  @@index([chunkX, chunkY])
  @@index([seed])
}

model Biome {
  id       Int         @id @default(autoincrement())
  name     String      @unique
  tiles    WorldTile[]
  monsters Monster[]
}

model Monster {
  id          Int        @id @default(autoincrement())
  name        String
  hp          Int
  x           Int
  y           Int
  biomeId     Int
  biome       Biome      @relation(fields: [biomeId], references: [id])
  worldTileId Int?
  worldTile   WorldTile? @relation(fields: [worldTileId], references: [id])
  // Add more fields as needed (type, loot, etc.)
}

model WeatherState {
  id        Int      @id @default(autoincrement())
  state     String // e.g., clear, cloudy, overcast, raining, lightning
  pressure  Int // Used for weather change logic
  updatedAt DateTime @updatedAt
}

model Settlement {
  id          Int      @id @default(autoincrement())
  name        String
  type        String // city, town, village, hamlet
  x           Int
  y           Int
  size        String // large, medium, small, tiny
  population  Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([x, y])
}

model Landmark {
  id          Int      @id @default(autoincrement())
  name        String
  type        String // ruins, tower, shrine, etc.
  x           Int
  y           Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([x, y])
}
