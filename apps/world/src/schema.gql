# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MapTile {
  x: Int!
  y: Int!
  biomeName: String
  symbol: String
  hasSettlement: Boolean!
  isSettlementCenter: Boolean!
}

type WorldTile {
  id: Int!
  x: Int!
  y: Int!
  biomeId: Int!
  biomeName: String!
  description: String
  height: Float!
  temperature: Float!
  moisture: Float!
  seed: Int!
  chunkX: Int!
  chunkY: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  biome: Biome
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Biome {
  id: Int!
  name: String!
  tiles: [WorldTile!]
}

type Settlement {
  id: Int!
  name: String!
  type: String!
  x: Int!
  y: Int!
  size: String!
  population: Int!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ChunkStats {
  averageHeight: Float!
  averageTemperature: Float!
  averageMoisture: Float!
}

type BiomeCount {
  biomeName: String!
  count: Int!
}

type PaginatedTiles {
  tiles: [WorldTile!]!
  totalCount: Int!
  offset: Int!
  limit: Int!
  hasMore: Boolean!
}

type ChunkData {
  chunkX: Int!
  chunkY: Int!
  tiles: [WorldTile!]
  paginatedTiles(limit: Int, offset: Int): PaginatedTiles
  settlements: [Settlement!]
  stats: ChunkStats
  biomeStats: [BiomeCount!]
}

type NearbyBiome {
  biomeName: String!
  distance: Float!
  direction: String!
}

type NearbySettlement {
  name: String!
  type: String!
  size: String!
  population: Int!
  x: Int!
  y: Int!
  description: String!
  distance: Float!
}

type CurrentSettlement {
  name: String!
  type: String!
  size: String!
  intensity: Float!
  isCenter: Boolean!
}

type TileWithNearbyBiomes {
  id: Int!
  x: Int!
  y: Int!
  biomeId: Int!
  biomeName: String!
  description: String
  height: Float!
  temperature: Float!
  moisture: Float!
  seed: Int!
  chunkX: Int!
  chunkY: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  biome: Biome
  nearbyBiomes: [NearbyBiome!]!
  nearbySettlements: [NearbySettlement!]!
  currentSettlement: CurrentSettlement
}

type TileUpdateResult {
  success: Boolean!
  message: String!
}

type Query {
  """Returns a 2D array of map tiles for a 50x50 region centered on (x, y)."""
  renderMapTiles(x: Int, y: Int): [[MapTile!]!]!

  """Returns an ASCII map centered on (x, y) with a 50x50 region."""
  renderMapAscii(x: Int, y: Int): String!

  """
  Returns a PNG map centered on (x, y) as a base64 string (50x50 region).
  """
  renderMapPngBase64(
    x: Int
    y: Int

    """Pixels per tile (resolution scalar), default 4"""
    pixelsPerTile: Int
  ): String!
  getChunk(chunkX: Float!, chunkY: Float!): ChunkData!
  getTile(x: Int!, y: Int!): TileWithNearbyBiomes!
}

type Mutation {
  """Clears the render cache in Redis. Returns number of keys removed."""
  clearRenderCache(
    """
    Optional suffix glob pattern (without prefix). Example: "*" or "*,p=4" to clear only p=4 entries.
    """
    pattern: String
  ): Int!
  updateTileDescription(x: Int!, y: Int!, description: String!): TileUpdateResult!
}