name: Deploy

on:
  push:
    branches:
      - main

concurrency:
  group: production-deploy
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  ARTIFACT_REPO: mud-services
  IMAGE_TAG: main-${{ github.sha }}
  TF_WORKDIR: infra/terraform

jobs:
  build:
    name: Build and Push ${{ matrix.service }}
    runs-on: ubuntu-latest
    environment: gcp
    strategy:
      matrix:
        include:
          - service: dm
            dockerfile: apps/dm/Dockerfile
          - service: world
            dockerfile: apps/world/Dockerfile
          - service: slack-bot
            dockerfile: apps/slack-bot/Dockerfile
          - service: tick
            dockerfile: apps/tick/Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_DEPLOY_SA }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker authentication
        run: gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Build and push image
        env:
          IMAGE_REPO: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ matrix.service }}
        run: |
          set -euo pipefail
          docker build -f "${{ matrix.dockerfile }}" -t "${IMAGE_REPO}:${IMAGE_TAG}" -t "${IMAGE_REPO}:latest" .
          docker push "${IMAGE_REPO}:${IMAGE_TAG}"
          docker push "${IMAGE_REPO}:latest"

  terraform:
    runs-on: ubuntu-latest
    environment: gcp
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_DEPLOY_SA }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Write Terraform backend config
        working-directory: ${{ env.TF_WORKDIR }}
        run: |
          cat > backend.hcl <<'EOF'
          bucket = "${{ vars.TF_BACKEND_BUCKET }}"
          prefix = "${{ vars.TF_BACKEND_PREFIX }}"
          EOF

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKDIR }}
        env:
          GOOGLE_PROJECT: ${{ env.PROJECT_ID }}
        run: terraform init -backend-config=backend.hcl

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform validate

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKDIR }}
        env:
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.REGION }}
          TF_VAR_dm_image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/dm:${{ env.IMAGE_TAG }}
          TF_VAR_world_image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/world:${{ env.IMAGE_TAG }}
          TF_VAR_slack_bot_image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/slack-bot:${{ env.IMAGE_TAG }}
          TF_VAR_tick_image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/tick:${{ env.IMAGE_TAG }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
          TF_VAR_slack_signing_secret: ${{ secrets.SLACK_SIGNING_SECRET }}
          TF_VAR_slack_app_token: ${{ secrets.SLACK_APP_TOKEN }}
          TF_VAR_slack_client_id: ${{ secrets.SLACK_CLIENT_ID }}
          TF_VAR_slack_client_secret: ${{ secrets.SLACK_CLIENT_SECRET }}
          TF_VAR_slack_state_secret: ${{ secrets.SLACK_STATE_SECRET }}
          TF_INPUT: 'false'
        run: terraform apply -auto-approve
