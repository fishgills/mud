model GameState {
  id        Int      @id @default(autoincrement())
  tick      Int      @default(0)
  gameHour  Int      @default(0) // 0-23
  gameDay   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
// Prisma schema for the dungeon crawler game engine
// This schema covers Player, WorldTile, Monster, WeatherState, and Biome

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Player {
  id          Int        @id @default(autoincrement())
  slackId     String     @unique // Slack user ID
  name        String
  x           Int        // X coordinate
  y           Int        // Y coordinate
  z           Int        // Z coordinate (surface, sewers, etc.)
  hp          Int        // Hit points
  gold        Int        @default(0)
  xp          Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  worldTile   WorldTile? @relation("PlayerLocation", fields: [worldTileId], references: [id])
  worldTileId Int?
}

model WorldTile {
  id          Int        @id @default(autoincrement())
  x           Int
  y           Int
  z           Int
  biomeId     Int
  biome       Biome      @relation(fields: [biomeId], references: [id])
  description String
  monsters    Monster[]
  players     Player[]   @relation("PlayerLocation")

  @@unique([x, y, z])
  // Add more fields as needed (items, exits, etc.)
}

model Biome {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  description String
  tiles     WorldTile[]
  monsters  Monster[]
}

model Monster {
  id        Int      @id @default(autoincrement())
  name      String
  hp        Int
  x         Int
  y         Int
  z         Int
  biomeId   Int
  biome     Biome    @relation(fields: [biomeId], references: [id])
  worldTileId Int?
  worldTile   WorldTile? @relation(fields: [worldTileId], references: [id])
  // Add more fields as needed (type, loot, etc.)
}

model WeatherState {
  id        Int      @id @default(autoincrement())
  state     String   // e.g., clear, cloudy, overcast, raining, lightning
  pressure  Int      // Used for weather change logic
  updatedAt DateTime @updatedAt
}
