# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TileInfo {
  x: Float!
  y: Float!
  biomeName: String!
  description: String
  height: Float!
  temperature: Float!
  moisture: Float!
}

type Monster {
  id: ID!
  name: String!
  type: String!
  hp: Int!
  maxHp: Int!
  strength: Int!
  agility: Int!
  health: Int!
  x: Int!
  y: Int!
  isAlive: Boolean!
  lastMove: DateTime!
  spawnedAt: DateTime!
  biomeId: Int!
  worldTileId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Player {
  id: ID!
  slackId: String!
  name: String!
  x: Int!
  y: Int!
  hp: Int!
  maxHp: Int!
  strength: Int!
  agility: Int!
  health: Int!
  gold: Int!
  xp: Int!
  level: Int!
  isAlive: Boolean!
  lastAction: DateTime
  createdAt: DateTime
  updatedAt: DateTime!
  worldTileId: Int
  currentTile: TileInfo
  nearbyPlayers: [Player!]
  nearbyMonsters: [Monster!]
}

type CombatLog {
  id: ID!
  attackerId: Int!
  attackerType: String!
  defenderId: Int!
  defenderType: String!
  damage: Int!
  x: Int!
  y: Int!
  timestamp: DateTime!
}

type LocationInfo {
  location: TileInfo!
  monsters: [Monster!]
  players: [Player!]
  recentCombat: [CombatLog!]
}

type TickResult {
  tick: Int!
  gameHour: Int!
  gameDay: Int!
  monstersSpawned: Int!
  monstersMoved: Int!
  combatEvents: Int!
  weatherUpdated: Boolean!
}

type SuccessResponse {
  success: Boolean!
  message: String
  result: TickResult
}

type PlayerResponse {
  success: Boolean!
  message: String
  result: TickResult
  data: Player
}

type MonsterResponse {
  success: Boolean!
  message: String
  result: TickResult
  data: Monster
}

type CombatRound {
  roundNumber: Float!
  attackerName: String!
  defenderName: String!
  attackRoll: Float!
  attackModifier: Float!
  totalAttack: Float!
  defenderAC: Float!
  hit: Boolean!
  damage: Float!
  defenderHpAfter: Float!
  killed: Boolean!
}

type InitiativeRoll {
  name: String!
  roll: Float!
  modifier: Float!
  total: Float!
}

type CombatLocation {
  x: Float!
  y: Float!
}

type CombatResult {
  success: Boolean!
  winnerName: String!
  loserName: String!
  totalDamageDealt: Float!
  roundsCompleted: Float!
  xpGained: Float!
  message: String!
}

type CombatResponse {
  success: Boolean!
  message: String
  result: TickResult
  data: CombatResult
}

type GameState {
  currentTime: String!
  totalPlayers: Float!
  totalMonsters: Float!
}

type GameStateResponse {
  success: Boolean!
  message: String
  result: TickResult
  data: GameState
}

type HealthCheck {
  status: String!
  timestamp: String!
}

type PlayerStats {
  player: Player!
  strengthModifier: Float!
  agilityModifier: Float!
  healthModifier: Float!
  dodgeChance: Float!
  baseDamage: String!
  armorClass: Float!
  xpForNextLevel: Float!
  xpProgress: Float!
  xpNeeded: Float!
  recentCombat: [CombatLog!]!
}

type NearbyPlayerInfo {
  distance: Float!
  direction: String!
  x: Int!
  y: Int!
}

type PlayerMoveResponse {
  success: Boolean!
  message: String
  result: TickResult
  player: Player!
  monsters: [Monster!]!
  playersAtLocation: [Player!]!
}

type BiomeSectorSummary {
  biomeName: String!
  proportion: Float!
  predominantDirections: [String!]!
}

type VisiblePeakInfo {
  x: Int!
  y: Int!
  height: Float!
  distance: Float!
  direction: String!
}

type VisibleSettlementInfo {
  name: String!
  type: String!
  size: String!
  distance: Float!
  direction: String!
}

type CurrentSettlementInfo {
  name: String!
  type: String!
  size: String!
  intensity: Float!
  isCenter: Boolean!
}

type LookViewData {
  location: TileInfo!
  visibilityRadius: Float!
  biomeSummary: [BiomeSectorSummary!]!
  visiblePeaks: [VisiblePeakInfo!]!
  visibleSettlements: [VisibleSettlementInfo!]!
  currentSettlement: CurrentSettlementInfo
  nearbyPlayers: [NearbyPlayerInfo!]
  inSettlement: Boolean!
  description: String!
  monsters: [Monster!]
}

type PerformanceStats {
  totalMs: Float!
  playerMs: Float!
  worldCenterNearbyMs: Float!
  worldBoundsTilesMs: Float!
  worldExtendedBoundsMs: Float!
  tilesFilterMs: Float!
  peaksSortMs: Float!
  biomeSummaryMs: Float!
  settlementsFilterMs: Float!
  aiMs: Float!
  tilesCount: Int!
  peaksCount: Int!
  aiProvider: String!
}

type LookViewResponse {
  success: Boolean!
  message: String
  result: TickResult
  data: LookViewData
  perf: PerformanceStats
}

type Query {
  getPlayer(slackId: String!): PlayerResponse!
  getAllPlayers: [Player!]!
  getPlayersAtLocation(x: Float!, y: Float!): [Player!]!
  getPlayerStats(slackId: String!): PlayerStats!
  getLookView(slackId: String!): LookViewResponse!
  health: HealthCheck!
  getGameState: GameStateResponse!
  getMonstersAtLocation(x: Float!, y: Float!): [Monster!]!
  getAllMonsters: [Monster!]!
}

type Mutation {
  createPlayer(input: CreatePlayerInput!): PlayerResponse!
  updatePlayerStats(slackId: String!, input: PlayerStatsInput!): PlayerResponse!
  rerollPlayerStats(slackId: String!): PlayerResponse!
  healPlayer(slackId: String!, amount: Float!): PlayerResponse!
  damagePlayer(slackId: String!, damage: Float!): PlayerResponse!

  """Attack a monster or another player at your current location"""
  attack(slackId: String!, input: AttackInput!): CombatResponse!
  respawn(slackId: String!): PlayerResponse!
  deletePlayer(slackId: String!): PlayerResponse!
  movePlayer(slackId: String!, input: MovePlayerInput!): PlayerMoveResponse!
  processTick: SuccessResponse!
  spawnMonster(input: SpawnMonsterInput!): MonsterResponse!
}

input CreatePlayerInput {
  slackId: String!
  name: String!
  x: Int
  y: Int
}

input PlayerStatsInput {
  hp: Int
  xp: Int
  gold: Int
  level: Int
}

input AttackInput {
  targetType: TargetType!
  targetId: Int!
}

enum TargetType {
  PLAYER
  MONSTER
}

input MovePlayerInput {
  direction: Direction!
}

"""Cardinal directions for player movement"""
enum Direction {
  NORTH
  EAST
  SOUTH
  WEST
}

input SpawnMonsterInput {
  x: Int!
  y: Int!
}