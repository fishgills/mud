{
  "title": "Inventory & Ground Loot Plan",
  "createdAt": "2025-10-29T00:00:00Z",
  "lastUpdatedAt": "2025-10-29T00:00:00Z",
  "owner": "dm/inventory-feature",
  "status": "in-progress",
  "choices": {
    "slots": ["head", "chest", "arms", "legs", "weapon"],
    "slotNaming": "head",
    "weaponSemantics": "single-hand-only",
    "capacityFormula": "10 + Strength",
    "stacking": false,
    "backfillRequired": false,
    "monsterDropBehavior": "drops-to-ground, player-notified-generic, explicit-pickup-required",
    "autoLoot": false,
    "allItemsPickupable": true
  },
  "qualityTiers": [
    "Trash",
    "Poor",
    "Common",
    "Uncommon",
    "Fine",
    "Superior",
    "Rare",
    "Epic",
    "Legendary",
    "Mythic",
    "Artifact",
    "Ascended",
    "Transcendent",
    "Primal",
    "Divine"
  ],
  "highLevelSteps": [
    {
      "id": "db-migrate",
      "title": "Schema changes",
      "description": "Add ItemQuality enum, add PlayerItem and WorldItem models with slot enum (head,chest,arms,legs,weapon). Optionally remove legacy columns in follow-up migration.",
      "status": "in-progress",
      "files": ["libs/database/prisma/schema.prisma"]
    },
    {
      "id": "services",
      "title": "Server services",
      "description": "Add PlayerItemService (bag/equip/drop/pickup) and LootService + LootGenerator (subscribe to monster:death -> persist WorldItem).",
      "status": "not_started",
      "files": [
        "apps/dm/src/app/player/player-item.service.ts",
        "apps/dm/src/app/monster/loot.service.ts",
        "apps/dm/src/app/monster/loot-generator.ts"
      ]
    },
    {
      "id": "factories-adapters",
      "title": "Load/save & DTO changes",
      "description": "Include playerItems in Player loads, map equipped PlayerItem rows to equipment (head/chest/arms/legs/weapon), add bag to Player DTO.",
      "status": "in-progress",
      "files": [
        "libs/engine/src/factories/player-factory.ts",
        "apps/dm/src/app/api/adapters/entity-to-dto.adapter.ts",
        "apps/dm/src/app/api/dto/player.dto.ts"
      ]
    },
    {
      "id": "api",
      "title": "DM HTTP APIs",
      "description": "Add endpoints GET /players/:id/items, POST /players/:id/pickup, POST /players/:id/equip, POST /players/:id/drop with transaction + Redis lock where necessary.",
      "status": "not_started",
      "files": [
        "apps/dm/src/app/player/player-item.controller.ts",
        "apps/dm/src/app/player/player-item.service.ts"
      ]
    },
    {
      "id": "slack",
      "title": "Slack handlers & notifications",
      "description": "Add PICKUP/DROP commands, pickup handler, extend inventory rendering, and notify players with a generic 'monster dropped stuff' message when loot spawns.",
      "status": "in-progress",
      "files": [
        "apps/slack/src/commands.ts",
        "apps/slack/src/handlers/pickup.ts",
        "apps/slack/src/handlers/inventory.ts",
        "apps/dm/src/app/notifications/location-notification.service.ts"
      ]
    },
    {
      "id": "tests",
      "title": "Tests",
      "description": "Unit tests for LootGenerator and PlayerItemService; integration tests for pickup concurrency and capacity; Slack handler tests.",
      "status": "not_started",
      "files": ["test/* (see test plan)"]
    }
  ],
  "apisDtoShapes": {
    "PlayerItemDto": [
      "id",
      "playerId?",
      "itemId",
      "quality",
      "equipped",
      "slot|null",
      "createdAt"
    ],
    "GET /players/:id/items": "{ equipment: { head, chest, arms, legs, weapon }, bag: PlayerItemDto[] }",
    "POST /players/:id/pickup": "{ worldItemId } -> { success, reason?, item?: PlayerItemDto }",
    "POST /players/:id/equip": "{ playerItemId, slot } -> updated equipment"
  },
  "lootRules": {
    "baseDropChance": "clamp(0.15 + monsterLevel*0.02, 0.02, 0.6)",
    "dropsPerKill": "usually 1 (variance 0..2)",
    "qualityRoll": "weighted toward lower tiers; shift slightly by monster level",
    "persistence": "persist each drop as WorldItem(itemId, quality, x, y, quantity=1)"
  },
  "concurrency": {
    "pickupLockKey": "lock:pickup:{worldItemId}",
    "lockStrategy": "SETNX + TTL; only lock holder runs DB transaction moving WorldItem -> PlayerItem",
    "capacityCheck": "server checks capacity = 10 + Strength inside pickup transaction"
  },
  "notes": "No backfill required; legacy columns may be removed. Items remain on ground until future cleanup job.",
  "nextActions": [
    "Provide exact Prisma schema diff (applied)",
    "Implement PlayerItemService and LootService (skeletons created)",
    "Add API endpoints and Redis locking for pickup"
  ]
}
