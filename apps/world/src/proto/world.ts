// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: world.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Tile } from "./common";

export const protobufPackage = "world";

export interface GenerateTileRequest {
  x: number;
  y: number;
}

export interface GenerateTileResponse {
  tile: Tile | undefined;
}

function createBaseGenerateTileRequest(): GenerateTileRequest {
  return { x: 0, y: 0 };
}

export const GenerateTileRequest: MessageFns<GenerateTileRequest> = {
  encode(message: GenerateTileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).int32(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateTileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateTileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateTileRequest {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: GenerateTileRequest): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateTileRequest>, I>>(base?: I): GenerateTileRequest {
    return GenerateTileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateTileRequest>, I>>(object: I): GenerateTileRequest {
    const message = createBaseGenerateTileRequest();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseGenerateTileResponse(): GenerateTileResponse {
  return { tile: undefined };
}

export const GenerateTileResponse: MessageFns<GenerateTileResponse> = {
  encode(message: GenerateTileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tile !== undefined) {
      Tile.encode(message.tile, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateTileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateTileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tile = Tile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateTileResponse {
    return { tile: isSet(object.tile) ? Tile.fromJSON(object.tile) : undefined };
  },

  toJSON(message: GenerateTileResponse): unknown {
    const obj: any = {};
    if (message.tile !== undefined) {
      obj.tile = Tile.toJSON(message.tile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateTileResponse>, I>>(base?: I): GenerateTileResponse {
    return GenerateTileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateTileResponse>, I>>(object: I): GenerateTileResponse {
    const message = createBaseGenerateTileResponse();
    message.tile = (object.tile !== undefined && object.tile !== null) ? Tile.fromPartial(object.tile) : undefined;
    return message;
  },
};

export interface WorldService {
  GenerateTile(request: GenerateTileRequest): Promise<GenerateTileResponse>;
}

export const WorldServiceServiceName = "world.WorldService";
export class WorldServiceClientImpl implements WorldService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || WorldServiceServiceName;
    this.rpc = rpc;
    this.GenerateTile = this.GenerateTile.bind(this);
  }
  GenerateTile(request: GenerateTileRequest): Promise<GenerateTileResponse> {
    const data = GenerateTileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GenerateTile", data);
    return promise.then((data) => GenerateTileResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
