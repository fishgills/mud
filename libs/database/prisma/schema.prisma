// Prisma schema for the dungeon crawler game engine
// This schema covers Player, WorldTile, Monster, WeatherState, and Biome

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GameState {
  id        Int      @id @default(autoincrement())
  tick      Int      @default(0)
  gameHour  Int      @default(0) // 0-23
  gameDay   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Player {
  id           Int           @id @default(autoincrement())
  slackId      String        @unique // Slack user ID (or other client ID)
  name         String
  x            Int // X coordinate
  y            Int // Y coordinate
  hp           Int // Hit points (current health)
  maxHp        Int           @default(100) // Maximum health
  strength     Int           @default(10) // Strength attribute (1-20)
  agility      Int           @default(10) // Agility attribute (1-20)
  health       Int           @default(10) // Health attribute (1-20, affects max HP)
  gold         Int           @default(0)
  xp           Int           @default(0)
  level        Int           @default(1)
  skillPoints  Int           @default(0)
  isAlive      Boolean       @default(true)
  lastAction   DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  worldTile    WorldTile?    @relation("PlayerLocation", fields: [worldTileId], references: [id])
  worldTileId  Int?
  party        Party?        @relation(fields: [partyId], references: [id])
  partyId      Int?
  partyMembers PartyMember[]
}

model WorldSeed {
  id                     Int      @id @default(autoincrement())
  seed                   Int      @unique
  heightSeed             Int
  temperatureSeed        Int
  moistureSeed           Int
  heightScale            Float    @default(0.01)
  temperatureScale       Float    @default(0.008)
  moistureScale          Float    @default(0.012)
  heightOctaves          Int      @default(4)
  temperatureOctaves     Int      @default(3)
  moistureOctaves        Int      @default(3)
  heightPersistence      Float    @default(0.5)
  temperaturePersistence Float    @default(0.6)
  moisturePersistence    Float    @default(0.4)
  heightLacunarity       Float    @default(2.0)
  temperatureLacunarity  Float    @default(2.1)
  moistureLacunarity     Float    @default(1.9)
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model WorldTile {
  id          Int       @id @default(autoincrement())
  x           Int
  y           Int
  biomeId     Int
  biome       Biome     @relation(fields: [biomeId], references: [id])
  biomeName   String // Store biome name for faster queries
  description String?
  height      Float // 0-1 height value from terrain noise
  temperature Float // 0-1 temperature value from temperature noise
  moisture    Float // 0-1 moisture value from moisture noise
  seed        Int // World seed used to generate this tile
  chunkX      Int // Chunk X coordinate (x / 50)
  chunkY      Int // Chunk Y coordinate (y / 50)
  players     Player[]  @relation("PlayerLocation")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([x, y])
  @@index([chunkX, chunkY])
  @@index([seed])
}

model Biome {
  id       Int         @id @default(autoincrement())
  name     String      @unique
  tiles    WorldTile[]
  monsters Monster[]
}

model Monster {
  id          Int        @id @default(autoincrement())
  name        String
  type        String     @default("generic") // monster type/species
  hp          Int
  maxHp       Int        @default(50)
  strength    Int        @default(8)
  agility     Int        @default(8)
  health      Int        @default(8)
  x           Int
  y           Int
  isAlive     Boolean    @default(true)
  lastMove    DateTime   @default(now())
  spawnedAt   DateTime   @default(now())
  biomeId     Int
  biome       Biome      @relation(fields: [biomeId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // Add more fields as needed (type, loot, etc.)
}

model WeatherState {
  id        Int      @id @default(autoincrement())
  state     String // e.g., clear, cloudy, overcast, raining, lightning
  pressure  Int // Used for weather change logic
  updatedAt DateTime @updatedAt
}

model Settlement {
  id          Int      @id @default(autoincrement())
  name        String
  type        String // city, town, village, hamlet
  x           Int
  y           Int
  size        String // large, medium, small, tiny
  population  Int
  description String
  npcs        Npc[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([x, y])
}

model Landmark {
  id          Int      @id @default(autoincrement())
  name        String
  type        String // ruins, tower, shrine, etc.
  x           Int
  y           Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([x, y])
}

model CombatLog {
  id           Int      @id @default(autoincrement())
  attackerId   Int // Player or Monster ID
  attackerType String // "player" or "monster"
  defenderId   Int // Player or Monster ID
  defenderType String // "player" or "monster"
  damage       Int
  x            Int // Location where combat occurred
  y            Int
  timestamp    DateTime @default(now())
}

model Npc {
  id           Int         @id @default(autoincrement())
  name         String
  role         String // merchant, quest_giver, guard, citizen, innkeeper
  x            Int
  y            Int
  hp           Int
  maxHp        Int         @default(50)
  strength     Int         @default(10)
  agility      Int         @default(10)
  health       Int         @default(10)
  isAlive      Boolean     @default(true)
  isHostile    Boolean     @default(false)
  dialogue     String?
  settlement   Settlement? @relation(fields: [settlementId], references: [id])
  settlementId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Party {
  id          Int           @id @default(autoincrement())
  name        String
  leaderId    Int
  maxSize     Int           @default(6)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  players     Player[]
  members     PartyMember[]
}

model PartyMember {
  id        Int      @id @default(autoincrement())
  party     Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  partyId   Int
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  Int
  isLeader  Boolean  @default(false)
  joinedAt  DateTime @default(now())

  @@unique([partyId, playerId])
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  type        String // weapon, armor, consumable, quest_item
  description String
  value       Int      @default(0) // Gold value
  attack      Int?     @default(0) // Attack bonus for weapons
  defense     Int?     @default(0) // Defense bonus for armor
  healthBonus Int?     @default(0) // Health restoration for consumables
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
